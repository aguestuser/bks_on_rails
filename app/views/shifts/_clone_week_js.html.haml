- # args: rest_index, shift, init_count
/******************************
/ "Event handlers really are functions that consume current worlds and produce them."
/ - How To Design Programs, 2e
/ ****************************/

:javascript
  $(document).ready(function(){

    var world = new World({
        count: #{ init_count }, // Int
        restIndex: #{ rest_index }, // Int
        editFields: "#{ escape_javascript( render 'clone_week_fields', rest_index: rest_index, shift_index:-1, shift: shift ) }" // Str
      })
      , mutator = new Mutator(world)
      , listener = new Listener(mutator)
    
    listener.listen()
  })

  //LISTENER
  function Listener(mutator){

    //ATTRIBUTES
    var self = this
    this.mutator = mutator
    this.world = this.mutator.world

    //PUBLIC METHODS
    this.listen = function (){ //RECURSION HOOK
      listenForAdd('addShift')
      listenForModify(this.world.removeSelectors, 'removeShift')
      listenForModify(this.world.editSelectors, 'editShift')
    }

    //PRIVATE METHODS
    function listenForAdd (message){
      // input: Str (message for: Mutator.Function())
      $(self.world.addSelector).click(function(){
        self.world = self.mutator[message]()
        self.listen()  // RECURSE
      })    
    }

    function listenForModify (selectors, message){
      // input: Arr of Strs, Str (message for: Mutator.Function(Int)
      _.each(selectors, function(selector, i){
        $(selector).click(function(){
          self.world = self.mutator[message](i)
          self.listen() // RECURSE
        })
      })     
    } 
  }

  // MUTATOR
  function Mutator(world){
    
    //ATTRIBUTES
    var self = this
    this.world = world

    //PUBLIC METHODS
    this.addShift = function(){
      // input: prior World (implicit)
      // output: new World
     var world = this.world
     $( world.restSelector ).append( world.editFields )
    
      return world
        .swapIndex(-1, world.count )
        .expandSelectors()
        .changeCountBy(1)
        .clearEventHandlers()
    }

    this.removeShift = function(index){
      //input: Int, prior World (implicit)
      //output: new World
      var world = this.world
        , here = world.domLocationFrom(index)
      here.remove() // delete shift entry

      var remainder = _.last(world.shiftSelectors, world.count - 1 - index ) // build array of selectors after removal point
        , oldIndices = _.map( remainder, function( selector, i ){ return i + ( world.count - remainder.length ) } ) // offset indices by difference between size of original array and current aray
        , newIndices = _.map(oldIndices, function(index){ return index -1 })

      return world
        .swapIndices(oldIndices, newIndices)
        .shrinkSelectors()
        .changeCountBy(-1)
        .clearEventHandlers()
    }

    this.editShift = function(index){
      //input: Int, prior World (implicit)
      //output: new World
      var world = this.world
        , here = world.domLocationFrom(index)
        , dates = world.currentDates(here)

      $( here ).replaceWith( world.editFields ) // replace values with dummy fields

      return world
        .swapIndex(-1, index)
        .restoreDates(world.domLocationFrom(index), dates) // send fresh instance of 'here' (b/c DOM has been mutated)
        .clearEventHandlers()
    }
  }

  //WORLD

  function World(wp){

    //ATTRIBUTES

    var self = this
    this.count = wp.count // Int

    this.restIndex = wp.restIndex // Int
    this.restIndexStr = wp.restIndex.toString() // Str
    this.editFields = wp.editFields // Str

    this.restSelector = "#restaurant_"+this.restIndexStr // Str
    this.addSelector = "#add_shift_restaurant_"+this.restIndexStr // Str 
    this.shiftSelectors = getShiftSelectors()
    this.editSelectors = getEditSelectors()
    this.removeSelectors = getRemoveSelectors()

    //PUBLIC METHODS

    //accessors
    this.domLocationFrom = function(index){
      //input: Int
      //output: jQuery Obj
      return $(this.restSelector).find(this.shiftSelectors[index])
    }

    this.currentDates = function(here){
      //input: jQuery Obj
      //output: Obj Literal of form
        // { start: DateString, end: DateString }
      return {
        start: dateStr( here, '.start', 'Start:'),
        end: dateStr( here, '.end', 'End:' )
      }
    }

    //mutations
    this.swapIndices = function(oldIndices, newIndices){
      //input: Arr of Ints, Arr of Indices
      //output: new World
      console.log()
      _.each(oldIndices, function(oldIndex, i){
        self.swapIndex(oldIndex, newIndices[i])
      })
      return this
    }

    this.swapIndex = function(oldShiftIndex, newShiftIndex){
      // input: Int, Int
      // does: converts Ints to Strings, swaps old ids for new ids
      // output: new World
      var osi = oldShiftIndex.toString(), nsi = newShiftIndex.toString(), ri = this.restIndex.toString()
      $(this.restSelector).find("#shift_"+osi).attr( "id", "shift_" + nsi )
      $("#remove_restaurant_"+ri+"_shift_"+osi).attr( "id", "remove_restaurant_"+ri+"_shift_"+nsi )
      $("#edit_restaurant_"+ri+"_shift_"+osi).attr( "id", "edit_restaurant_"+ri+"_shift_"+nsi )
      return this  
    }

    this.restoreDates = function(here, dates){
      // input: jQuery Obj, Obj Literal of form:
        // { start: DateString, end: DateString }
      // does: restores values inside selector to values provided in object literal
      // output: new World
      here.find('#restaurant_shifts__shifts__start').attr('value', dates.start)
      here.find('#restaurant_shifts__shifts__end').attr('value', dates.end)
      return this
    }

    this.expandSelectors = function(){
      this.shiftSelectors.push("#shift_"+this.count)
      this.removeSelectors.push("#remove_restaurant_"+this.restIndexStr+"_shift_"+this.count)
      this.editSelectors.push("#edit_restaurant_"+this.restIndexStr+"_shift_"+this.count)
      return this
    }

    this.shrinkSelectors = function(){
      _.each(lineItemSelectors(), function(selectors){
        selectors.pop()
      })
      return this
    }

    this.changeCountBy = function(int){
      this.count += int
      return this
    }

    this.clearEventHandlers = function(){
      // output: new World
      _.each(eventHandlingSelectors(), function(selectors){
        _.each(selectors, function(selector){
          $(selector).off('click')
        })
      })
      return this
    }

    // PRIVATE METHODS

    //initializers
    function getShiftSelectors(){
      var base = "#shift_"
      return selectorsFrom(base)
    }

    function getEditSelectors(){
      var base = "#edit_restaurant_"+self.restIndexStr+"_shift_"
      return selectorsFrom(base)
    }

    function getRemoveSelectors(){
      var base = "#remove_restaurant_"+self.restIndexStr+"_shift_"
      return selectorsFrom(base)
    }

    function selectorsFrom(base){
      return _(self.count).times( function(n) { return base + n.toString() } )
    }

    //accessors
    function lineItemSelectors(){
      return [ self.shiftSelectors, self.removeSelectors, self.editSelectors ]
    }

    function eventHandlingSelectors(){
      return [ self.removeSelectors, self.editSelectors, [ self.addSelector ] ]
    }

    function modifySelectors(){
      return [ self.removeSelectors, self.editSelectors ]
    }

    function dateStr(here, selector, garbageStr){
      return here
        .find(selector)
        .text()
        // .replace(garbageStr, '').trim()
        .replace(/(Start:|End:|MON|TUE|WED|THU|FRI|SAT|SUN|\|)/g, '')
        .trim()
    }

  }


 