- # args: rest_index, shift, init_count

:javascript
  $(document).ready(function(){

    var world = new World({
        count: #{ init_count }, // Int
        restIndex: #{ rest_index }, // Int
        addStr: "#{ escape_javascript( render 'clone_week_fields', rest_index: rest_index, shift_index:-1, shift: shift ) }" // Str
      })
      , mutator = new Mutator(world)
      , listener = new Listener(mutator)
    
    listener.listen()
  })

  //LISTENER

  function Listener(mutator){
    //context
    var self = this
    
    //attributes
    this.mutator = mutator
    this.world = this.mutator.world

    //public methods
    this.listen = function (){ //RECURSION HOOK
 
      listenForAdd('addShift')
      listenForModify(this.world.removeSelectors, 'removeShift')
      listenForModify(this.world.editSelectors, 'editShift')

      function listenForAdd (message){
        // input: Str (message for: Mutator.Function())
        console.log(self.mutator)
        $(self.world.addSelector).click(function(){
          self.world = self.mutator[message]()
          self.listen()  // RECURSE
        })    
      }

      function listenForModify (selectors, message){
        // input: Arr of Strs, Str (message for: Mutator.Function(Int)
        _.each(selectors, function(selector, i){
          $(selector).click(function(){
            self.world = self.mutator[message](i)
            self.listen() // RECURSE
          })
        })     
      } 
    }
  }

  // MUTATOR

  function Mutator(world){
    //context
    var self = this

    //attributes
    this.world = world

    //public methods
    this.addShift = function(){
      // input: prior World (implicit)
      // output: World
     var world = this.world

     $( world.restSelector ).append( world.addStr )
    
      world
        .swapIds(-1, world.count )
        .expandSelectors()
        .changeCountBy(1)
        .clearEventHandlers()

      return world // RECURSE
    }

    this.removeShift = function(removeIndex){
      //input: Int, prior World (implicit)
      //output: World
      var world = this.world

      $(world.shiftSelectors[removeIndex]).remove() // delete shift entry

      var remainder = _.last(world.shiftSelectors, world.count - 1 - removeIndex )
      _.each(remainder, function( shiftSelector, remainderIndex ){ // loop through all shift entries with indexes greater than shiftIndex
        var offset = world.count - remainder.length
          , oldShiftIndex = remainderIndex + offset
        world.swapIds(oldShiftIndex, oldShiftIndex -1 )
      })

      world
        .shrinkSelectors()
        .changeCountBy(-1)
        .clearEventHandlers()

      return world
    }

    this.editShift = function(editIndex){
      var world = this.world
    }
  }

  //WORLD
  function World(wp){
    //CONTEXT
    var self = this

    //ATTRIBUTES
    this.count = wp.count // Int

    this.restIndex = wp.restIndex // Int
    this.restIndexStr = wp.restIndex.toString() // Str
    this.addStr = wp.addStr // Str

    this.restSelector = "#restaurant_"+this.restIndexStr // Str
    this.addSelector = "#add_shift_restaurant_"+this.restIndexStr // Str 
    this.shiftSelectors = getShiftSelectors()
    this.editSelectors = getEditSelectors()
    this.removeSelectors = getRemoveSelectors()

    //PUBLIC METHODS

    //mutations
    
    this.swapIds = function(oldShiftIndex, newShiftIndex){
      // input: Int, Int
      // does: converts Ints to Strings, swaps old ids for new ids
      // output: new World
      var osi = oldShiftIndex.toString(), nsi = newShiftIndex.toString(), ri = this.restIndex.toString()
      $(this.restSelector).find("#shift_"+osi).attr( "id", "shift_" + nsi )
      $("#remove_restaurant_"+ri+"_shift_"+osi).attr( "id", "remove_restaurant_"+ri+"_shift_"+nsi )
      return this  
    }

    this.expandSelectors = function(){
      this.shiftSelectors.push("#shift_"+this.count)
      this.removeSelectors.push("#remove_restaurant_"+this.restIndexStr+"_shift_"+this.count)
      this.editSelectors.push("#edit_restaurant_"+this.restIndexStr+"_shift_"+this.count)
      return this
    }

    this.shrinkSelectors = function(){
      _.each(lineItemSelectors(), function(selectors){
        selectors.pop()
      })
      return this
    }

    this.changeCountBy = function(int){
      this.count += int
      return this
    }

    this.clearEventHandlers = function(){
      // _.each(this.removeSelectors, function(selector){ $(selector).off('click') })

      _.each(eventHandlingSelectors(), function(selectors){
        _.each(selectors, function(selector){
          $(selector).off('click')
        })
      })
      return this
    }

    // PRIVATE METHODS

    //initializers
    function getShiftSelectors(){
      var base = "#shift_"
      return selectorsFrom(base)
    }

    function getEditSelectors(){
      var base = "#edit_restaurant_"+self.restIndexStr+"_shift_"
      return selectorsFrom(base)
    }

    function getRemoveSelectors(){
      var base = "#remove_restaurant_"+self.restIndexStr+"_shift_"
      return selectorsFrom(base)
    }

    function selectorsFrom(base){
      return _(self.count).times( function(n) { return base + n.toString() } )
    }

    //accessors
    function lineItemSelectors(){
      return [ self.shiftSelectors, self.removeSelectors, self.editSelectors ]
    }

    function eventHandlingSelectors(){
      return [ self.removeSelectors, self.editSelectors, [ self.addSelector ] ]
    }

    function modifySelectors(){
      return [ self.removeSelectors, self.editSelectors ]
    }

  }


 